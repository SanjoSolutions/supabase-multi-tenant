create sequence "public"."notes_id_seq";

create table "public"."notes" (
    "id" bigint not null default nextval('notes_id_seq'::regclass),
    "title" text,
    "tenant_id" bigint
);


alter table "public"."notes" enable row level security;

create table "public"."tenant_memberships" (
    "user_id" uuid not null,
    "tenant_id" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."tenant_memberships" enable row level security;

create table "public"."tenants" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text
);


alter table "public"."tenants" enable row level security;

alter sequence "public"."notes_id_seq" owned by "public"."notes"."id";

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

CREATE UNIQUE INDEX tenant_memberships_pkey ON public.tenant_memberships USING btree (user_id, tenant_id);

CREATE UNIQUE INDEX tenants_pkey ON public.tenants USING btree (id);

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."tenant_memberships" add constraint "tenant_memberships_pkey" PRIMARY KEY using index "tenant_memberships_pkey";

alter table "public"."tenants" add constraint "tenants_pkey" PRIMARY KEY using index "tenants_pkey";

alter table "public"."notes" add constraint "notes_tenant_id_fkey" FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notes" validate constraint "notes_tenant_id_fkey";

alter table "public"."tenant_memberships" add constraint "tenant_memberships_tenant_id_fkey" FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tenant_memberships" validate constraint "tenant_memberships_tenant_id_fkey";

alter table "public"."tenant_memberships" add constraint "tenant_memberships_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tenant_memberships" validate constraint "tenant_memberships_user_id_fkey";

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

grant delete on table "public"."tenant_memberships" to "anon";

grant insert on table "public"."tenant_memberships" to "anon";

grant references on table "public"."tenant_memberships" to "anon";

grant select on table "public"."tenant_memberships" to "anon";

grant trigger on table "public"."tenant_memberships" to "anon";

grant truncate on table "public"."tenant_memberships" to "anon";

grant update on table "public"."tenant_memberships" to "anon";

grant delete on table "public"."tenant_memberships" to "authenticated";

grant insert on table "public"."tenant_memberships" to "authenticated";

grant references on table "public"."tenant_memberships" to "authenticated";

grant select on table "public"."tenant_memberships" to "authenticated";

grant trigger on table "public"."tenant_memberships" to "authenticated";

grant truncate on table "public"."tenant_memberships" to "authenticated";

grant update on table "public"."tenant_memberships" to "authenticated";

grant delete on table "public"."tenant_memberships" to "service_role";

grant insert on table "public"."tenant_memberships" to "service_role";

grant references on table "public"."tenant_memberships" to "service_role";

grant select on table "public"."tenant_memberships" to "service_role";

grant trigger on table "public"."tenant_memberships" to "service_role";

grant truncate on table "public"."tenant_memberships" to "service_role";

grant update on table "public"."tenant_memberships" to "service_role";

grant delete on table "public"."tenants" to "anon";

grant insert on table "public"."tenants" to "anon";

grant references on table "public"."tenants" to "anon";

grant select on table "public"."tenants" to "anon";

grant trigger on table "public"."tenants" to "anon";

grant truncate on table "public"."tenants" to "anon";

grant update on table "public"."tenants" to "anon";

grant delete on table "public"."tenants" to "authenticated";

grant insert on table "public"."tenants" to "authenticated";

grant references on table "public"."tenants" to "authenticated";

grant select on table "public"."tenants" to "authenticated";

grant trigger on table "public"."tenants" to "authenticated";

grant truncate on table "public"."tenants" to "authenticated";

grant update on table "public"."tenants" to "authenticated";

grant delete on table "public"."tenants" to "service_role";

grant insert on table "public"."tenants" to "service_role";

grant references on table "public"."tenants" to "service_role";

grant select on table "public"."tenants" to "service_role";

grant trigger on table "public"."tenants" to "service_role";

grant truncate on table "public"."tenants" to "service_role";

grant update on table "public"."tenants" to "service_role";

create policy "Only notes of tenants that the user is member of"
on "public"."notes"
as permissive
for select
to authenticated
using ((tenant_id IN ( SELECT tenant_memberships.tenant_id
   FROM tenant_memberships
  WHERE (tenant_memberships.user_id = auth.uid()))));


create policy "Only records for the user"
on "public"."tenant_memberships"
as permissive
for select
to authenticated
using ((user_id = ( SELECT auth.uid() AS uid)));


create policy "Only tenants where the user is member of"
on "public"."tenants"
as permissive
for select
to authenticated
using ((id IN ( SELECT tenant_memberships.tenant_id
   FROM tenant_memberships
  WHERE (tenant_memberships.user_id = auth.uid()))));
